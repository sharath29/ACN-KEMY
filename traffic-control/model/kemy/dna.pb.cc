// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dna.proto

#include "dna.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_dna_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_dna_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Memory;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_dna_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MemoryRange;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_dna_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Whisker;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_dna_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_WhiskerTree;
}  // namespace protobuf_dna_2eproto
namespace KemyBuffers {
class WhiskerTreeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WhiskerTree>
      _instance;
} _WhiskerTree_default_instance_;
class MemoryRangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MemoryRange>
      _instance;
} _MemoryRange_default_instance_;
class MemoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Memory>
      _instance;
} _Memory_default_instance_;
class WhiskerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Whisker>
      _instance;
} _Whisker_default_instance_;
}  // namespace KemyBuffers
namespace protobuf_dna_2eproto {
static void InitDefaultsWhiskerTree() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KemyBuffers::_WhiskerTree_default_instance_;
    new (ptr) ::KemyBuffers::WhiskerTree();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KemyBuffers::WhiskerTree::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_WhiskerTree =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsWhiskerTree}, {
      &protobuf_dna_2eproto::scc_info_MemoryRange.base,
      &protobuf_dna_2eproto::scc_info_Whisker.base,}};

static void InitDefaultsMemoryRange() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KemyBuffers::_MemoryRange_default_instance_;
    new (ptr) ::KemyBuffers::MemoryRange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KemyBuffers::MemoryRange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MemoryRange =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMemoryRange}, {
      &protobuf_dna_2eproto::scc_info_Memory.base,}};

static void InitDefaultsMemory() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KemyBuffers::_Memory_default_instance_;
    new (ptr) ::KemyBuffers::Memory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KemyBuffers::Memory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Memory =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMemory}, {}};

static void InitDefaultsWhisker() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KemyBuffers::_Whisker_default_instance_;
    new (ptr) ::KemyBuffers::Whisker();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KemyBuffers::Whisker::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Whisker =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWhisker}, {
      &protobuf_dna_2eproto::scc_info_MemoryRange.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_WhiskerTree.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MemoryRange.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Memory.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Whisker.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KemyBuffers::WhiskerTree, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KemyBuffers::WhiskerTree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KemyBuffers::WhiskerTree, domain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KemyBuffers::WhiskerTree, children_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KemyBuffers::WhiskerTree, leaf_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KemyBuffers::MemoryRange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KemyBuffers::MemoryRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KemyBuffers::MemoryRange, lower_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KemyBuffers::MemoryRange, upper_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KemyBuffers::Memory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KemyBuffers::Memory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KemyBuffers::Memory, ewma_qlen_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KemyBuffers::Whisker, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KemyBuffers::Whisker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KemyBuffers::Whisker, window_increment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KemyBuffers::Whisker, window_multiple_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KemyBuffers::Whisker, domain_),
  1,
  2,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::KemyBuffers::WhiskerTree)},
  { 11, 18, sizeof(::KemyBuffers::MemoryRange)},
  { 20, 26, sizeof(::KemyBuffers::Memory)},
  { 27, 35, sizeof(::KemyBuffers::Whisker)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::KemyBuffers::_WhiskerTree_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KemyBuffers::_MemoryRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KemyBuffers::_Memory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KemyBuffers::_Whisker_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "dna.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tdna.proto\022\013KemyBuffers\"\207\001\n\013WhiskerTree"
      "\022(\n\006domain\030\001 \001(\0132\030.KemyBuffers.MemoryRan"
      "ge\022*\n\010children\030\002 \003(\0132\030.KemyBuffers.Whisk"
      "erTree\022\"\n\004leaf\030\003 \001(\0132\024.KemyBuffers.Whisk"
      "er\"U\n\013MemoryRange\022\"\n\005lower\030\013 \001(\0132\023.KemyB"
      "uffers.Memory\022\"\n\005upper\030\014 \001(\0132\023.KemyBuffe"
      "rs.Memory\"\033\n\006Memory\022\021\n\tewma_qlen\030\025 \001(\001\"f"
      "\n\007Whisker\022\030\n\020window_increment\030\037 \001(\021\022\027\n\017w"
      "indow_multiple\030  \001(\001\022(\n\006domain\030\" \001(\0132\030.K"
      "emyBuffers.MemoryRange"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 382);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dna.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_dna_2eproto
namespace KemyBuffers {

// ===================================================================

void WhiskerTree::InitAsDefaultInstance() {
  ::KemyBuffers::_WhiskerTree_default_instance_._instance.get_mutable()->domain_ = const_cast< ::KemyBuffers::MemoryRange*>(
      ::KemyBuffers::MemoryRange::internal_default_instance());
  ::KemyBuffers::_WhiskerTree_default_instance_._instance.get_mutable()->leaf_ = const_cast< ::KemyBuffers::Whisker*>(
      ::KemyBuffers::Whisker::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WhiskerTree::kDomainFieldNumber;
const int WhiskerTree::kChildrenFieldNumber;
const int WhiskerTree::kLeafFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WhiskerTree::WhiskerTree()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dna_2eproto::scc_info_WhiskerTree.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KemyBuffers.WhiskerTree)
}
WhiskerTree::WhiskerTree(const WhiskerTree& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      children_(from.children_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_domain()) {
    domain_ = new ::KemyBuffers::MemoryRange(*from.domain_);
  } else {
    domain_ = NULL;
  }
  if (from.has_leaf()) {
    leaf_ = new ::KemyBuffers::Whisker(*from.leaf_);
  } else {
    leaf_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:KemyBuffers.WhiskerTree)
}

void WhiskerTree::SharedCtor() {
  ::memset(&domain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leaf_) -
      reinterpret_cast<char*>(&domain_)) + sizeof(leaf_));
}

WhiskerTree::~WhiskerTree() {
  // @@protoc_insertion_point(destructor:KemyBuffers.WhiskerTree)
  SharedDtor();
}

void WhiskerTree::SharedDtor() {
  if (this != internal_default_instance()) delete domain_;
  if (this != internal_default_instance()) delete leaf_;
}

void WhiskerTree::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WhiskerTree::descriptor() {
  ::protobuf_dna_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dna_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WhiskerTree& WhiskerTree::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dna_2eproto::scc_info_WhiskerTree.base);
  return *internal_default_instance();
}


void WhiskerTree::Clear() {
// @@protoc_insertion_point(message_clear_start:KemyBuffers.WhiskerTree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(domain_ != NULL);
      domain_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(leaf_ != NULL);
      leaf_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WhiskerTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KemyBuffers.WhiskerTree)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .KemyBuffers.MemoryRange domain = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_domain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .KemyBuffers.WhiskerTree children = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_children()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .KemyBuffers.Whisker leaf = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leaf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KemyBuffers.WhiskerTree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KemyBuffers.WhiskerTree)
  return false;
#undef DO_
}

void WhiskerTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KemyBuffers.WhiskerTree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .KemyBuffers.MemoryRange domain = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_domain(), output);
  }

  // repeated .KemyBuffers.WhiskerTree children = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->children_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->children(static_cast<int>(i)),
      output);
  }

  // optional .KemyBuffers.Whisker leaf = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_leaf(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KemyBuffers.WhiskerTree)
}

::google::protobuf::uint8* WhiskerTree::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KemyBuffers.WhiskerTree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .KemyBuffers.MemoryRange domain = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_domain(), deterministic, target);
  }

  // repeated .KemyBuffers.WhiskerTree children = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->children_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->children(static_cast<int>(i)), deterministic, target);
  }

  // optional .KemyBuffers.Whisker leaf = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_leaf(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KemyBuffers.WhiskerTree)
  return target;
}

size_t WhiskerTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KemyBuffers.WhiskerTree)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .KemyBuffers.WhiskerTree children = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->children_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->children(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .KemyBuffers.MemoryRange domain = 1;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *domain_);
    }

    // optional .KemyBuffers.Whisker leaf = 3;
    if (has_leaf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *leaf_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WhiskerTree::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KemyBuffers.WhiskerTree)
  GOOGLE_DCHECK_NE(&from, this);
  const WhiskerTree* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WhiskerTree>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KemyBuffers.WhiskerTree)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KemyBuffers.WhiskerTree)
    MergeFrom(*source);
  }
}

void WhiskerTree::MergeFrom(const WhiskerTree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KemyBuffers.WhiskerTree)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_domain()->::KemyBuffers::MemoryRange::MergeFrom(from.domain());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_leaf()->::KemyBuffers::Whisker::MergeFrom(from.leaf());
    }
  }
}

void WhiskerTree::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KemyBuffers.WhiskerTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhiskerTree::CopyFrom(const WhiskerTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KemyBuffers.WhiskerTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhiskerTree::IsInitialized() const {
  return true;
}

void WhiskerTree::Swap(WhiskerTree* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WhiskerTree::InternalSwap(WhiskerTree* other) {
  using std::swap;
  CastToBase(&children_)->InternalSwap(CastToBase(&other->children_));
  swap(domain_, other->domain_);
  swap(leaf_, other->leaf_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WhiskerTree::GetMetadata() const {
  protobuf_dna_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dna_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MemoryRange::InitAsDefaultInstance() {
  ::KemyBuffers::_MemoryRange_default_instance_._instance.get_mutable()->lower_ = const_cast< ::KemyBuffers::Memory*>(
      ::KemyBuffers::Memory::internal_default_instance());
  ::KemyBuffers::_MemoryRange_default_instance_._instance.get_mutable()->upper_ = const_cast< ::KemyBuffers::Memory*>(
      ::KemyBuffers::Memory::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryRange::kLowerFieldNumber;
const int MemoryRange::kUpperFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryRange::MemoryRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dna_2eproto::scc_info_MemoryRange.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KemyBuffers.MemoryRange)
}
MemoryRange::MemoryRange(const MemoryRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lower()) {
    lower_ = new ::KemyBuffers::Memory(*from.lower_);
  } else {
    lower_ = NULL;
  }
  if (from.has_upper()) {
    upper_ = new ::KemyBuffers::Memory(*from.upper_);
  } else {
    upper_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:KemyBuffers.MemoryRange)
}

void MemoryRange::SharedCtor() {
  ::memset(&lower_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upper_) -
      reinterpret_cast<char*>(&lower_)) + sizeof(upper_));
}

MemoryRange::~MemoryRange() {
  // @@protoc_insertion_point(destructor:KemyBuffers.MemoryRange)
  SharedDtor();
}

void MemoryRange::SharedDtor() {
  if (this != internal_default_instance()) delete lower_;
  if (this != internal_default_instance()) delete upper_;
}

void MemoryRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MemoryRange::descriptor() {
  ::protobuf_dna_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dna_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MemoryRange& MemoryRange::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dna_2eproto::scc_info_MemoryRange.base);
  return *internal_default_instance();
}


void MemoryRange::Clear() {
// @@protoc_insertion_point(message_clear_start:KemyBuffers.MemoryRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(lower_ != NULL);
      lower_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(upper_ != NULL);
      upper_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MemoryRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KemyBuffers.MemoryRange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .KemyBuffers.Memory lower = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lower()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .KemyBuffers.Memory upper = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_upper()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KemyBuffers.MemoryRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KemyBuffers.MemoryRange)
  return false;
#undef DO_
}

void MemoryRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KemyBuffers.MemoryRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .KemyBuffers.Memory lower = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_lower(), output);
  }

  // optional .KemyBuffers.Memory upper = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_upper(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KemyBuffers.MemoryRange)
}

::google::protobuf::uint8* MemoryRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KemyBuffers.MemoryRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .KemyBuffers.Memory lower = 11;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_lower(), deterministic, target);
  }

  // optional .KemyBuffers.Memory upper = 12;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_upper(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KemyBuffers.MemoryRange)
  return target;
}

size_t MemoryRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KemyBuffers.MemoryRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .KemyBuffers.Memory lower = 11;
    if (has_lower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *lower_);
    }

    // optional .KemyBuffers.Memory upper = 12;
    if (has_upper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *upper_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KemyBuffers.MemoryRange)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryRange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemoryRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KemyBuffers.MemoryRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KemyBuffers.MemoryRange)
    MergeFrom(*source);
  }
}

void MemoryRange::MergeFrom(const MemoryRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KemyBuffers.MemoryRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_lower()->::KemyBuffers::Memory::MergeFrom(from.lower());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_upper()->::KemyBuffers::Memory::MergeFrom(from.upper());
    }
  }
}

void MemoryRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KemyBuffers.MemoryRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryRange::CopyFrom(const MemoryRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KemyBuffers.MemoryRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryRange::IsInitialized() const {
  return true;
}

void MemoryRange::Swap(MemoryRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemoryRange::InternalSwap(MemoryRange* other) {
  using std::swap;
  swap(lower_, other->lower_);
  swap(upper_, other->upper_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MemoryRange::GetMetadata() const {
  protobuf_dna_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dna_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Memory::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Memory::kEwmaQlenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Memory::Memory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dna_2eproto::scc_info_Memory.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KemyBuffers.Memory)
}
Memory::Memory(const Memory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ewma_qlen_ = from.ewma_qlen_;
  // @@protoc_insertion_point(copy_constructor:KemyBuffers.Memory)
}

void Memory::SharedCtor() {
  ewma_qlen_ = 0;
}

Memory::~Memory() {
  // @@protoc_insertion_point(destructor:KemyBuffers.Memory)
  SharedDtor();
}

void Memory::SharedDtor() {
}

void Memory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Memory::descriptor() {
  ::protobuf_dna_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dna_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Memory& Memory::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dna_2eproto::scc_info_Memory.base);
  return *internal_default_instance();
}


void Memory::Clear() {
// @@protoc_insertion_point(message_clear_start:KemyBuffers.Memory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ewma_qlen_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Memory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KemyBuffers.Memory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double ewma_qlen = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_ewma_qlen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ewma_qlen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KemyBuffers.Memory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KemyBuffers.Memory)
  return false;
#undef DO_
}

void Memory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KemyBuffers.Memory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ewma_qlen = 21;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->ewma_qlen(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KemyBuffers.Memory)
}

::google::protobuf::uint8* Memory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KemyBuffers.Memory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ewma_qlen = 21;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->ewma_qlen(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KemyBuffers.Memory)
  return target;
}

size_t Memory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KemyBuffers.Memory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional double ewma_qlen = 21;
  if (has_ewma_qlen()) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Memory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KemyBuffers.Memory)
  GOOGLE_DCHECK_NE(&from, this);
  const Memory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Memory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KemyBuffers.Memory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KemyBuffers.Memory)
    MergeFrom(*source);
  }
}

void Memory::MergeFrom(const Memory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KemyBuffers.Memory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ewma_qlen()) {
    set_ewma_qlen(from.ewma_qlen());
  }
}

void Memory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KemyBuffers.Memory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Memory::CopyFrom(const Memory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KemyBuffers.Memory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Memory::IsInitialized() const {
  return true;
}

void Memory::Swap(Memory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Memory::InternalSwap(Memory* other) {
  using std::swap;
  swap(ewma_qlen_, other->ewma_qlen_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Memory::GetMetadata() const {
  protobuf_dna_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dna_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Whisker::InitAsDefaultInstance() {
  ::KemyBuffers::_Whisker_default_instance_._instance.get_mutable()->domain_ = const_cast< ::KemyBuffers::MemoryRange*>(
      ::KemyBuffers::MemoryRange::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Whisker::kWindowIncrementFieldNumber;
const int Whisker::kWindowMultipleFieldNumber;
const int Whisker::kDomainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Whisker::Whisker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dna_2eproto::scc_info_Whisker.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KemyBuffers.Whisker)
}
Whisker::Whisker(const Whisker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_domain()) {
    domain_ = new ::KemyBuffers::MemoryRange(*from.domain_);
  } else {
    domain_ = NULL;
  }
  ::memcpy(&window_increment_, &from.window_increment_,
    static_cast<size_t>(reinterpret_cast<char*>(&window_multiple_) -
    reinterpret_cast<char*>(&window_increment_)) + sizeof(window_multiple_));
  // @@protoc_insertion_point(copy_constructor:KemyBuffers.Whisker)
}

void Whisker::SharedCtor() {
  ::memset(&domain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&window_multiple_) -
      reinterpret_cast<char*>(&domain_)) + sizeof(window_multiple_));
}

Whisker::~Whisker() {
  // @@protoc_insertion_point(destructor:KemyBuffers.Whisker)
  SharedDtor();
}

void Whisker::SharedDtor() {
  if (this != internal_default_instance()) delete domain_;
}

void Whisker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Whisker::descriptor() {
  ::protobuf_dna_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dna_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Whisker& Whisker::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dna_2eproto::scc_info_Whisker.base);
  return *internal_default_instance();
}


void Whisker::Clear() {
// @@protoc_insertion_point(message_clear_start:KemyBuffers.Whisker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(domain_ != NULL);
    domain_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&window_increment_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&window_multiple_) -
        reinterpret_cast<char*>(&window_increment_)) + sizeof(window_multiple_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Whisker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KemyBuffers.Whisker)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 window_increment = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_window_increment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &window_increment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double window_multiple = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1u /* 257 & 0xFF */)) {
          set_has_window_multiple();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &window_multiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .KemyBuffers.MemoryRange domain = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_domain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KemyBuffers.Whisker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KemyBuffers.Whisker)
  return false;
#undef DO_
}

void Whisker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KemyBuffers.Whisker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 window_increment = 31;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(31, this->window_increment(), output);
  }

  // optional double window_multiple = 32;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->window_multiple(), output);
  }

  // optional .KemyBuffers.MemoryRange domain = 34;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->_internal_domain(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KemyBuffers.Whisker)
}

::google::protobuf::uint8* Whisker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KemyBuffers.Whisker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 window_increment = 31;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(31, this->window_increment(), target);
  }

  // optional double window_multiple = 32;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->window_multiple(), target);
  }

  // optional .KemyBuffers.MemoryRange domain = 34;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        34, this->_internal_domain(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KemyBuffers.Whisker)
  return target;
}

size_t Whisker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KemyBuffers.Whisker)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .KemyBuffers.MemoryRange domain = 34;
    if (has_domain()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *domain_);
    }

    // optional sint32 window_increment = 31;
    if (has_window_increment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->window_increment());
    }

    // optional double window_multiple = 32;
    if (has_window_multiple()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Whisker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KemyBuffers.Whisker)
  GOOGLE_DCHECK_NE(&from, this);
  const Whisker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Whisker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KemyBuffers.Whisker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KemyBuffers.Whisker)
    MergeFrom(*source);
  }
}

void Whisker::MergeFrom(const Whisker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KemyBuffers.Whisker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_domain()->::KemyBuffers::MemoryRange::MergeFrom(from.domain());
    }
    if (cached_has_bits & 0x00000002u) {
      window_increment_ = from.window_increment_;
    }
    if (cached_has_bits & 0x00000004u) {
      window_multiple_ = from.window_multiple_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Whisker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KemyBuffers.Whisker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Whisker::CopyFrom(const Whisker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KemyBuffers.Whisker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Whisker::IsInitialized() const {
  return true;
}

void Whisker::Swap(Whisker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Whisker::InternalSwap(Whisker* other) {
  using std::swap;
  swap(domain_, other->domain_);
  swap(window_increment_, other->window_increment_);
  swap(window_multiple_, other->window_multiple_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Whisker::GetMetadata() const {
  protobuf_dna_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dna_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace KemyBuffers
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KemyBuffers::WhiskerTree* Arena::CreateMaybeMessage< ::KemyBuffers::WhiskerTree >(Arena* arena) {
  return Arena::CreateInternal< ::KemyBuffers::WhiskerTree >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KemyBuffers::MemoryRange* Arena::CreateMaybeMessage< ::KemyBuffers::MemoryRange >(Arena* arena) {
  return Arena::CreateInternal< ::KemyBuffers::MemoryRange >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KemyBuffers::Memory* Arena::CreateMaybeMessage< ::KemyBuffers::Memory >(Arena* arena) {
  return Arena::CreateInternal< ::KemyBuffers::Memory >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KemyBuffers::Whisker* Arena::CreateMaybeMessage< ::KemyBuffers::Whisker >(Arena* arena) {
  return Arena::CreateInternal< ::KemyBuffers::Whisker >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
