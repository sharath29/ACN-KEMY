// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dna.proto

#ifndef PROTOBUF_INCLUDED_dna_2eproto
#define PROTOBUF_INCLUDED_dna_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_dna_2eproto 

namespace protobuf_dna_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_dna_2eproto
namespace KemyBuffers {
class Memory;
class MemoryDefaultTypeInternal;
extern MemoryDefaultTypeInternal _Memory_default_instance_;
class MemoryRange;
class MemoryRangeDefaultTypeInternal;
extern MemoryRangeDefaultTypeInternal _MemoryRange_default_instance_;
class Whisker;
class WhiskerDefaultTypeInternal;
extern WhiskerDefaultTypeInternal _Whisker_default_instance_;
class WhiskerTree;
class WhiskerTreeDefaultTypeInternal;
extern WhiskerTreeDefaultTypeInternal _WhiskerTree_default_instance_;
}  // namespace KemyBuffers
namespace google {
namespace protobuf {
template<> ::KemyBuffers::Memory* Arena::CreateMaybeMessage<::KemyBuffers::Memory>(Arena*);
template<> ::KemyBuffers::MemoryRange* Arena::CreateMaybeMessage<::KemyBuffers::MemoryRange>(Arena*);
template<> ::KemyBuffers::Whisker* Arena::CreateMaybeMessage<::KemyBuffers::Whisker>(Arena*);
template<> ::KemyBuffers::WhiskerTree* Arena::CreateMaybeMessage<::KemyBuffers::WhiskerTree>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace KemyBuffers {

// ===================================================================

class WhiskerTree : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KemyBuffers.WhiskerTree) */ {
 public:
  WhiskerTree();
  virtual ~WhiskerTree();

  WhiskerTree(const WhiskerTree& from);

  inline WhiskerTree& operator=(const WhiskerTree& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WhiskerTree(WhiskerTree&& from) noexcept
    : WhiskerTree() {
    *this = ::std::move(from);
  }

  inline WhiskerTree& operator=(WhiskerTree&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WhiskerTree& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WhiskerTree* internal_default_instance() {
    return reinterpret_cast<const WhiskerTree*>(
               &_WhiskerTree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(WhiskerTree* other);
  friend void swap(WhiskerTree& a, WhiskerTree& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WhiskerTree* New() const final {
    return CreateMaybeMessage<WhiskerTree>(NULL);
  }

  WhiskerTree* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WhiskerTree>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WhiskerTree& from);
  void MergeFrom(const WhiskerTree& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhiskerTree* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .KemyBuffers.WhiskerTree children = 2;
  int children_size() const;
  void clear_children();
  static const int kChildrenFieldNumber = 2;
  ::KemyBuffers::WhiskerTree* mutable_children(int index);
  ::google::protobuf::RepeatedPtrField< ::KemyBuffers::WhiskerTree >*
      mutable_children();
  const ::KemyBuffers::WhiskerTree& children(int index) const;
  ::KemyBuffers::WhiskerTree* add_children();
  const ::google::protobuf::RepeatedPtrField< ::KemyBuffers::WhiskerTree >&
      children() const;

  // optional .KemyBuffers.MemoryRange domain = 1;
  bool has_domain() const;
  void clear_domain();
  static const int kDomainFieldNumber = 1;
  private:
  const ::KemyBuffers::MemoryRange& _internal_domain() const;
  public:
  const ::KemyBuffers::MemoryRange& domain() const;
  ::KemyBuffers::MemoryRange* release_domain();
  ::KemyBuffers::MemoryRange* mutable_domain();
  void set_allocated_domain(::KemyBuffers::MemoryRange* domain);

  // optional .KemyBuffers.Whisker leaf = 3;
  bool has_leaf() const;
  void clear_leaf();
  static const int kLeafFieldNumber = 3;
  private:
  const ::KemyBuffers::Whisker& _internal_leaf() const;
  public:
  const ::KemyBuffers::Whisker& leaf() const;
  ::KemyBuffers::Whisker* release_leaf();
  ::KemyBuffers::Whisker* mutable_leaf();
  void set_allocated_leaf(::KemyBuffers::Whisker* leaf);

  // @@protoc_insertion_point(class_scope:KemyBuffers.WhiskerTree)
 private:
  void set_has_domain();
  void clear_has_domain();
  void set_has_leaf();
  void clear_has_leaf();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::KemyBuffers::WhiskerTree > children_;
  ::KemyBuffers::MemoryRange* domain_;
  ::KemyBuffers::Whisker* leaf_;
  friend struct ::protobuf_dna_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MemoryRange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KemyBuffers.MemoryRange) */ {
 public:
  MemoryRange();
  virtual ~MemoryRange();

  MemoryRange(const MemoryRange& from);

  inline MemoryRange& operator=(const MemoryRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MemoryRange(MemoryRange&& from) noexcept
    : MemoryRange() {
    *this = ::std::move(from);
  }

  inline MemoryRange& operator=(MemoryRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryRange* internal_default_instance() {
    return reinterpret_cast<const MemoryRange*>(
               &_MemoryRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MemoryRange* other);
  friend void swap(MemoryRange& a, MemoryRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MemoryRange* New() const final {
    return CreateMaybeMessage<MemoryRange>(NULL);
  }

  MemoryRange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MemoryRange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MemoryRange& from);
  void MergeFrom(const MemoryRange& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .KemyBuffers.Memory lower = 11;
  bool has_lower() const;
  void clear_lower();
  static const int kLowerFieldNumber = 11;
  private:
  const ::KemyBuffers::Memory& _internal_lower() const;
  public:
  const ::KemyBuffers::Memory& lower() const;
  ::KemyBuffers::Memory* release_lower();
  ::KemyBuffers::Memory* mutable_lower();
  void set_allocated_lower(::KemyBuffers::Memory* lower);

  // optional .KemyBuffers.Memory upper = 12;
  bool has_upper() const;
  void clear_upper();
  static const int kUpperFieldNumber = 12;
  private:
  const ::KemyBuffers::Memory& _internal_upper() const;
  public:
  const ::KemyBuffers::Memory& upper() const;
  ::KemyBuffers::Memory* release_upper();
  ::KemyBuffers::Memory* mutable_upper();
  void set_allocated_upper(::KemyBuffers::Memory* upper);

  // @@protoc_insertion_point(class_scope:KemyBuffers.MemoryRange)
 private:
  void set_has_lower();
  void clear_has_lower();
  void set_has_upper();
  void clear_has_upper();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::KemyBuffers::Memory* lower_;
  ::KemyBuffers::Memory* upper_;
  friend struct ::protobuf_dna_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Memory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KemyBuffers.Memory) */ {
 public:
  Memory();
  virtual ~Memory();

  Memory(const Memory& from);

  inline Memory& operator=(const Memory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Memory(Memory&& from) noexcept
    : Memory() {
    *this = ::std::move(from);
  }

  inline Memory& operator=(Memory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Memory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Memory* internal_default_instance() {
    return reinterpret_cast<const Memory*>(
               &_Memory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Memory* other);
  friend void swap(Memory& a, Memory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Memory* New() const final {
    return CreateMaybeMessage<Memory>(NULL);
  }

  Memory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Memory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Memory& from);
  void MergeFrom(const Memory& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Memory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double ewma_qlen = 21;
  bool has_ewma_qlen() const;
  void clear_ewma_qlen();
  static const int kEwmaQlenFieldNumber = 21;
  double ewma_qlen() const;
  void set_ewma_qlen(double value);

  // @@protoc_insertion_point(class_scope:KemyBuffers.Memory)
 private:
  void set_has_ewma_qlen();
  void clear_has_ewma_qlen();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double ewma_qlen_;
  friend struct ::protobuf_dna_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Whisker : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KemyBuffers.Whisker) */ {
 public:
  Whisker();
  virtual ~Whisker();

  Whisker(const Whisker& from);

  inline Whisker& operator=(const Whisker& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Whisker(Whisker&& from) noexcept
    : Whisker() {
    *this = ::std::move(from);
  }

  inline Whisker& operator=(Whisker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Whisker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Whisker* internal_default_instance() {
    return reinterpret_cast<const Whisker*>(
               &_Whisker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Whisker* other);
  friend void swap(Whisker& a, Whisker& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Whisker* New() const final {
    return CreateMaybeMessage<Whisker>(NULL);
  }

  Whisker* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Whisker>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Whisker& from);
  void MergeFrom(const Whisker& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Whisker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .KemyBuffers.MemoryRange domain = 34;
  bool has_domain() const;
  void clear_domain();
  static const int kDomainFieldNumber = 34;
  private:
  const ::KemyBuffers::MemoryRange& _internal_domain() const;
  public:
  const ::KemyBuffers::MemoryRange& domain() const;
  ::KemyBuffers::MemoryRange* release_domain();
  ::KemyBuffers::MemoryRange* mutable_domain();
  void set_allocated_domain(::KemyBuffers::MemoryRange* domain);

  // optional sint32 window_increment = 31;
  bool has_window_increment() const;
  void clear_window_increment();
  static const int kWindowIncrementFieldNumber = 31;
  ::google::protobuf::int32 window_increment() const;
  void set_window_increment(::google::protobuf::int32 value);

  // optional double window_multiple = 32;
  bool has_window_multiple() const;
  void clear_window_multiple();
  static const int kWindowMultipleFieldNumber = 32;
  double window_multiple() const;
  void set_window_multiple(double value);

  // @@protoc_insertion_point(class_scope:KemyBuffers.Whisker)
 private:
  void set_has_window_increment();
  void clear_has_window_increment();
  void set_has_window_multiple();
  void clear_has_window_multiple();
  void set_has_domain();
  void clear_has_domain();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::KemyBuffers::MemoryRange* domain_;
  ::google::protobuf::int32 window_increment_;
  double window_multiple_;
  friend struct ::protobuf_dna_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WhiskerTree

// optional .KemyBuffers.MemoryRange domain = 1;
inline bool WhiskerTree::has_domain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WhiskerTree::set_has_domain() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WhiskerTree::clear_has_domain() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WhiskerTree::clear_domain() {
  if (domain_ != NULL) domain_->Clear();
  clear_has_domain();
}
inline const ::KemyBuffers::MemoryRange& WhiskerTree::_internal_domain() const {
  return *domain_;
}
inline const ::KemyBuffers::MemoryRange& WhiskerTree::domain() const {
  const ::KemyBuffers::MemoryRange* p = domain_;
  // @@protoc_insertion_point(field_get:KemyBuffers.WhiskerTree.domain)
  return p != NULL ? *p : *reinterpret_cast<const ::KemyBuffers::MemoryRange*>(
      &::KemyBuffers::_MemoryRange_default_instance_);
}
inline ::KemyBuffers::MemoryRange* WhiskerTree::release_domain() {
  // @@protoc_insertion_point(field_release:KemyBuffers.WhiskerTree.domain)
  clear_has_domain();
  ::KemyBuffers::MemoryRange* temp = domain_;
  domain_ = NULL;
  return temp;
}
inline ::KemyBuffers::MemoryRange* WhiskerTree::mutable_domain() {
  set_has_domain();
  if (domain_ == NULL) {
    auto* p = CreateMaybeMessage<::KemyBuffers::MemoryRange>(GetArenaNoVirtual());
    domain_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KemyBuffers.WhiskerTree.domain)
  return domain_;
}
inline void WhiskerTree::set_allocated_domain(::KemyBuffers::MemoryRange* domain) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete domain_;
  }
  if (domain) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      domain = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, domain, submessage_arena);
    }
    set_has_domain();
  } else {
    clear_has_domain();
  }
  domain_ = domain;
  // @@protoc_insertion_point(field_set_allocated:KemyBuffers.WhiskerTree.domain)
}

// repeated .KemyBuffers.WhiskerTree children = 2;
inline int WhiskerTree::children_size() const {
  return children_.size();
}
inline void WhiskerTree::clear_children() {
  children_.Clear();
}
inline ::KemyBuffers::WhiskerTree* WhiskerTree::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:KemyBuffers.WhiskerTree.children)
  return children_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::KemyBuffers::WhiskerTree >*
WhiskerTree::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:KemyBuffers.WhiskerTree.children)
  return &children_;
}
inline const ::KemyBuffers::WhiskerTree& WhiskerTree::children(int index) const {
  // @@protoc_insertion_point(field_get:KemyBuffers.WhiskerTree.children)
  return children_.Get(index);
}
inline ::KemyBuffers::WhiskerTree* WhiskerTree::add_children() {
  // @@protoc_insertion_point(field_add:KemyBuffers.WhiskerTree.children)
  return children_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KemyBuffers::WhiskerTree >&
WhiskerTree::children() const {
  // @@protoc_insertion_point(field_list:KemyBuffers.WhiskerTree.children)
  return children_;
}

// optional .KemyBuffers.Whisker leaf = 3;
inline bool WhiskerTree::has_leaf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WhiskerTree::set_has_leaf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WhiskerTree::clear_has_leaf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WhiskerTree::clear_leaf() {
  if (leaf_ != NULL) leaf_->Clear();
  clear_has_leaf();
}
inline const ::KemyBuffers::Whisker& WhiskerTree::_internal_leaf() const {
  return *leaf_;
}
inline const ::KemyBuffers::Whisker& WhiskerTree::leaf() const {
  const ::KemyBuffers::Whisker* p = leaf_;
  // @@protoc_insertion_point(field_get:KemyBuffers.WhiskerTree.leaf)
  return p != NULL ? *p : *reinterpret_cast<const ::KemyBuffers::Whisker*>(
      &::KemyBuffers::_Whisker_default_instance_);
}
inline ::KemyBuffers::Whisker* WhiskerTree::release_leaf() {
  // @@protoc_insertion_point(field_release:KemyBuffers.WhiskerTree.leaf)
  clear_has_leaf();
  ::KemyBuffers::Whisker* temp = leaf_;
  leaf_ = NULL;
  return temp;
}
inline ::KemyBuffers::Whisker* WhiskerTree::mutable_leaf() {
  set_has_leaf();
  if (leaf_ == NULL) {
    auto* p = CreateMaybeMessage<::KemyBuffers::Whisker>(GetArenaNoVirtual());
    leaf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KemyBuffers.WhiskerTree.leaf)
  return leaf_;
}
inline void WhiskerTree::set_allocated_leaf(::KemyBuffers::Whisker* leaf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete leaf_;
  }
  if (leaf) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      leaf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, leaf, submessage_arena);
    }
    set_has_leaf();
  } else {
    clear_has_leaf();
  }
  leaf_ = leaf;
  // @@protoc_insertion_point(field_set_allocated:KemyBuffers.WhiskerTree.leaf)
}

// -------------------------------------------------------------------

// MemoryRange

// optional .KemyBuffers.Memory lower = 11;
inline bool MemoryRange::has_lower() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemoryRange::set_has_lower() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemoryRange::clear_has_lower() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemoryRange::clear_lower() {
  if (lower_ != NULL) lower_->Clear();
  clear_has_lower();
}
inline const ::KemyBuffers::Memory& MemoryRange::_internal_lower() const {
  return *lower_;
}
inline const ::KemyBuffers::Memory& MemoryRange::lower() const {
  const ::KemyBuffers::Memory* p = lower_;
  // @@protoc_insertion_point(field_get:KemyBuffers.MemoryRange.lower)
  return p != NULL ? *p : *reinterpret_cast<const ::KemyBuffers::Memory*>(
      &::KemyBuffers::_Memory_default_instance_);
}
inline ::KemyBuffers::Memory* MemoryRange::release_lower() {
  // @@protoc_insertion_point(field_release:KemyBuffers.MemoryRange.lower)
  clear_has_lower();
  ::KemyBuffers::Memory* temp = lower_;
  lower_ = NULL;
  return temp;
}
inline ::KemyBuffers::Memory* MemoryRange::mutable_lower() {
  set_has_lower();
  if (lower_ == NULL) {
    auto* p = CreateMaybeMessage<::KemyBuffers::Memory>(GetArenaNoVirtual());
    lower_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KemyBuffers.MemoryRange.lower)
  return lower_;
}
inline void MemoryRange::set_allocated_lower(::KemyBuffers::Memory* lower) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lower_;
  }
  if (lower) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lower = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lower, submessage_arena);
    }
    set_has_lower();
  } else {
    clear_has_lower();
  }
  lower_ = lower;
  // @@protoc_insertion_point(field_set_allocated:KemyBuffers.MemoryRange.lower)
}

// optional .KemyBuffers.Memory upper = 12;
inline bool MemoryRange::has_upper() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemoryRange::set_has_upper() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MemoryRange::clear_has_upper() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MemoryRange::clear_upper() {
  if (upper_ != NULL) upper_->Clear();
  clear_has_upper();
}
inline const ::KemyBuffers::Memory& MemoryRange::_internal_upper() const {
  return *upper_;
}
inline const ::KemyBuffers::Memory& MemoryRange::upper() const {
  const ::KemyBuffers::Memory* p = upper_;
  // @@protoc_insertion_point(field_get:KemyBuffers.MemoryRange.upper)
  return p != NULL ? *p : *reinterpret_cast<const ::KemyBuffers::Memory*>(
      &::KemyBuffers::_Memory_default_instance_);
}
inline ::KemyBuffers::Memory* MemoryRange::release_upper() {
  // @@protoc_insertion_point(field_release:KemyBuffers.MemoryRange.upper)
  clear_has_upper();
  ::KemyBuffers::Memory* temp = upper_;
  upper_ = NULL;
  return temp;
}
inline ::KemyBuffers::Memory* MemoryRange::mutable_upper() {
  set_has_upper();
  if (upper_ == NULL) {
    auto* p = CreateMaybeMessage<::KemyBuffers::Memory>(GetArenaNoVirtual());
    upper_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KemyBuffers.MemoryRange.upper)
  return upper_;
}
inline void MemoryRange::set_allocated_upper(::KemyBuffers::Memory* upper) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete upper_;
  }
  if (upper) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      upper = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, upper, submessage_arena);
    }
    set_has_upper();
  } else {
    clear_has_upper();
  }
  upper_ = upper;
  // @@protoc_insertion_point(field_set_allocated:KemyBuffers.MemoryRange.upper)
}

// -------------------------------------------------------------------

// Memory

// optional double ewma_qlen = 21;
inline bool Memory::has_ewma_qlen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Memory::set_has_ewma_qlen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Memory::clear_has_ewma_qlen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Memory::clear_ewma_qlen() {
  ewma_qlen_ = 0;
  clear_has_ewma_qlen();
}
inline double Memory::ewma_qlen() const {
  // @@protoc_insertion_point(field_get:KemyBuffers.Memory.ewma_qlen)
  return ewma_qlen_;
}
inline void Memory::set_ewma_qlen(double value) {
  set_has_ewma_qlen();
  ewma_qlen_ = value;
  // @@protoc_insertion_point(field_set:KemyBuffers.Memory.ewma_qlen)
}

// -------------------------------------------------------------------

// Whisker

// optional sint32 window_increment = 31;
inline bool Whisker::has_window_increment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Whisker::set_has_window_increment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Whisker::clear_has_window_increment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Whisker::clear_window_increment() {
  window_increment_ = 0;
  clear_has_window_increment();
}
inline ::google::protobuf::int32 Whisker::window_increment() const {
  // @@protoc_insertion_point(field_get:KemyBuffers.Whisker.window_increment)
  return window_increment_;
}
inline void Whisker::set_window_increment(::google::protobuf::int32 value) {
  set_has_window_increment();
  window_increment_ = value;
  // @@protoc_insertion_point(field_set:KemyBuffers.Whisker.window_increment)
}

// optional double window_multiple = 32;
inline bool Whisker::has_window_multiple() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Whisker::set_has_window_multiple() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Whisker::clear_has_window_multiple() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Whisker::clear_window_multiple() {
  window_multiple_ = 0;
  clear_has_window_multiple();
}
inline double Whisker::window_multiple() const {
  // @@protoc_insertion_point(field_get:KemyBuffers.Whisker.window_multiple)
  return window_multiple_;
}
inline void Whisker::set_window_multiple(double value) {
  set_has_window_multiple();
  window_multiple_ = value;
  // @@protoc_insertion_point(field_set:KemyBuffers.Whisker.window_multiple)
}

// optional .KemyBuffers.MemoryRange domain = 34;
inline bool Whisker::has_domain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Whisker::set_has_domain() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Whisker::clear_has_domain() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Whisker::clear_domain() {
  if (domain_ != NULL) domain_->Clear();
  clear_has_domain();
}
inline const ::KemyBuffers::MemoryRange& Whisker::_internal_domain() const {
  return *domain_;
}
inline const ::KemyBuffers::MemoryRange& Whisker::domain() const {
  const ::KemyBuffers::MemoryRange* p = domain_;
  // @@protoc_insertion_point(field_get:KemyBuffers.Whisker.domain)
  return p != NULL ? *p : *reinterpret_cast<const ::KemyBuffers::MemoryRange*>(
      &::KemyBuffers::_MemoryRange_default_instance_);
}
inline ::KemyBuffers::MemoryRange* Whisker::release_domain() {
  // @@protoc_insertion_point(field_release:KemyBuffers.Whisker.domain)
  clear_has_domain();
  ::KemyBuffers::MemoryRange* temp = domain_;
  domain_ = NULL;
  return temp;
}
inline ::KemyBuffers::MemoryRange* Whisker::mutable_domain() {
  set_has_domain();
  if (domain_ == NULL) {
    auto* p = CreateMaybeMessage<::KemyBuffers::MemoryRange>(GetArenaNoVirtual());
    domain_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KemyBuffers.Whisker.domain)
  return domain_;
}
inline void Whisker::set_allocated_domain(::KemyBuffers::MemoryRange* domain) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete domain_;
  }
  if (domain) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      domain = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, domain, submessage_arena);
    }
    set_has_domain();
  } else {
    clear_has_domain();
  }
  domain_ = domain;
  // @@protoc_insertion_point(field_set_allocated:KemyBuffers.Whisker.domain)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace KemyBuffers

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_dna_2eproto
